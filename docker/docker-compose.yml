version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.4
    container_name: zookeeper
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      network:
        ipv4_address: 172.18.0.2

  kafka:
    image: confluentinc/cp-kafka:6.2.4
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 29092:29092
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: OUTSIDE://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://172.18.0.3:29092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 1
      KAFKA_LOG_RETENTION_MS: 1000
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      network:
          ipv4_address: 172.18.0.3

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      network:
          ipv4_address: 172.18.0.4

  kafka-topics-generator:
    image: confluentinc/cp-kafka:6.2.4
    container_name: kafka-topics-generator
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
        "
        # blocks until kafka is reachable
        kafka-topics --bootstrap-server kafka:9092 --list
        
        echo -e 'Creating kafka topics'
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic url_video --replication-factor 1 --partitions 2
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic frame_to_analyze --replication-factor 1 --partitions 2
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic processed_images --replication-factor 1 --partitions 2

        echo -e 'Successfully created the following topics:'
        kafka-topics --bootstrap-server kafka:9092 --list
        "
    networks:
      network:
          ipv4_address: 172.18.0.5

  redis:
    image: redis/redis-stack:7.2.0-v8
    container_name: redis
    ports:
      - "6379:6379"
      - "13333:8001"
    environment:
      - REDIS_BIND=172.18.0.6
      - REDIS_PORT=6379
      - REDIS_DATABASES=16
      - REDIS_AOF_ENABLED=no
      - REDIS_REPLICATION_MODE=master
    networks:
      network:
          ipv4_address: 172.18.0.6

  myapp:
    tty: true
    container_name: myapp
    ports:
      - "9999:9999"
      - "6670:22"
    build: /ubuntu
    volumes:
      - .:/app
    command: uvicorn main:app --host 0.0.0.0 --port 9999
    networks:
      network:
        ipv4_address: 172.18.0.10

networks:
  network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.18.0.0/16